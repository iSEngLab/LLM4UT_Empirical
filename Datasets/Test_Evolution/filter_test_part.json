[
    {
        "test_src": "@Test public void testMessageForConsole() { System.out.println(\"messageForConsole\"); String msg = \"\"; Boolean verbose = null; GUIBackend instance = new GUIBackend(); instance.messageForConsole(msg, verbose); fail(\"The test case is a prototype.\"); } ",
        "test_tgt": "@Test public void testMessageForConsole() { System.out.println(\"messageForConsole\"); String msg = \"\"; Boolean verbose = null; GUIBackend instance = new GUIBackend(); fail(\"The test case is a prototype.\"); } ",
        "focal_src": "void messageForConsole(String msg, Boolean verbose); ",
        "focal_tgt": "void messageForConsole(MessageType type, String msg); "
    },
    {
        "test_src": "@Test public void drop() { final String dbname = NAME + \"DBCreate\"; query(_DB_CREATE.args(dbname, \"<dummy/>\", \"doc.xml\")); query(_DB_DROP.args(dbname)); query(_DB_EXISTS.args(dbname), \"false\"); error(_DB_DROP.args(dbname), Err.BXDB_OPEN); } ",
        "test_tgt": "@Test public void drop() { final String dbname = NAME + \"DBCreate\"; query(_DB_CREATE.args(dbname, \"<dummy/>\", \"doc.xml\")); query(_DB_DROP.args(dbname)); query(_DB_EXISTS.args(dbname), \"false\"); error(_DB_DROP.args(dbname), Err.BXDB_WHICH); } ",
        "focal_src": "private Item drop(final QueryContext ctx)throws QueryException { ctx.updates.add(new DBDrop(checkData(ctx), info, ctx), ctx); return null; } ",
        "focal_tgt": "private Item drop(final QueryContext ctx)throws QueryException { checkCreate(ctx); final String name = string(checkStr(expr[0], ctx)); if( ! Databases.validName(name))throw BXDB_NAME.get(info, name); if( ! ctx.context.globalopts.dbexists(name))throw BXDB_WHICH.get(info, name); ctx.updates.add(new DBDrop(name, info, ctx), ctx); return null; } "
    },
    {
        "test_src": "@Test public void testFetchFile()throws Exception { URL url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL)); File outputPath = new File(\"target/downloaded_cve.xml\"); Downloader.fetchFile(url, outputPath); } ",
        "test_tgt": "@Test public void testFetchFile()throws Exception { URL url = new URL(Settings.getString(Settings.KEYS.CPE_URL)); String outputPath = \"target/downloaded_cpe.xml\"; Downloader.fetchFile(url, outputPath, true); url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL)); outputPath = \"target/downloaded_cve.xml\"; Downloader.fetchFile(url, outputPath, false); } ",
        "focal_src": "public static void fetchFile(URL url, File outputPath)throws DownloadFailedException { HttpURLConnection conn = null; try { conn = Downloader.getConnection(url); conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\"); conn.connect(); } catch(IOException ex) { try { if(conn != null) { conn.disconnect(); } } finally { conn = null; } throw new DownloadFailedException(\"Error downloading file.\", ex); } final String encoding = conn.getContentEncoding(); BufferedOutputStream writer = null; InputStream reader = null; try { if(encoding != null && \"gzip\".equalsIgnoreCase(encoding)) { reader = new GZIPInputStream(conn.getInputStream()); } else if(encoding != null && \"deflate\".equalsIgnoreCase(encoding)) { reader = new InflaterInputStream(conn.getInputStream()); } else { reader = conn.getInputStream(); } writer = new BufferedOutputStream(new FileOutputStream(outputPath)); final byte[]buffer = new byte[4096]; int bytesRead; while((bytesRead = reader.read(buffer)) > 0) { writer.write(buffer, 0, bytesRead); } } catch(Exception ex) { throw new DownloadFailedException(\"Error saving downloaded file.\", ex); } finally { if(writer != null) { try { writer.close(); } catch(Exception ex) { Logger.getLogger(Downloader.class.getName()).log(Level.FINEST, \"Error closing the writer in Downloader.\", ex); } } if(reader != null) { try { reader.close(); } catch(Exception ex) { Logger.getLogger(Downloader.class.getName()).log(Level.FINEST, \"Error closing the reader in Downloader.\", ex); } } try { conn.disconnect(); } finally { conn = null; } } } ",
        "focal_tgt": "public static void fetchFile(URL url, File outputPath)throws DownloadFailedException { fetchFile(url, outputPath, false); } "
    },
    {
        "test_src": "@Test public void testReadPom_File()throws Exception { File file = BaseTest.getResourceAsFile(this, \"dwr-pom.xml\"); String expResult = \"Direct Web Remoting\"; Model result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); file = BaseTest.getResourceAsFile(this, \"jmockit-1.26.pom\"); expResult = \"Main\"; result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); } ",
        "test_tgt": "@Test public void testReadPom_File()throws Exception { File file = BaseTest.getResourceAsFile(this, \"dwr-pom.xml\"); String expResult = \"Direct Web Remoting\"; Model result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); expResult = \"get ahead\"; assertEquals(expResult, result.getOrganization()); expResult = \"http://getahead.ltd.uk/dwr\"; assertEquals(expResult, result.getOrganizationUrl()); file = BaseTest.getResourceAsFile(this, \"jmockit-1.26.pom\"); expResult = \"Main\"; result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); } ",
        "focal_src": "public static Model readPom(File file)throws AnalysisException { try { final PomParser parser = new PomParser(); final Model model = parser.parse(file); if(model == null) { throw new AnalysisException(String.format(\"Unable to parse pom '%s'\", file.getPath())); } return model; } catch(PomParseException ex) { LOGGER.warn(\"Unable to parse pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } catch(IOException ex) { LOGGER.warn(\"Unable to parse pom '{}'(IO Exception)\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } catch(Throwable ex) { LOGGER.warn(\"Unexpected error during parsing of the pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } } ",
        "focal_tgt": "public static Model readPom(File file)throws AnalysisException { try { final PomParser parser = new PomParser(); final Model model = parser.parse(file); if(model == null) { throw new AnalysisException(String.format(\"Unable to parse pom '%s'\", file.getPath())); } return model; } catch(AnalysisException ex) { throw ex; } catch(PomParseException ex) { LOGGER.warn(\"Unable to parse pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } catch(Throwable ex) { LOGGER.warn(\"Unexpected error during parsing of the pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } } "
    },
    {
        "test_src": "@Ignore@Test public void testUploadFile()throws Exception { Response response = uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\"); Assert.assertEquals(200, response.getStatus()); Response listdir = fileBrowserService.fileOps().listdir(\"/tmp\", httpHeaders, uriInfo); JSONArray statuses = (JSONArray)listdir.getEntity(); System.out.println(statuses.size()); Response response2 = fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, httpHeaders, uriInfo); Assert.assertEquals(200, response2.getStatus()); } ",
        "test_tgt": "@Test public void testUploadFile()throws Exception { Response response = uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\"); Assert.assertEquals(200, response.getStatus()); Response listdir = fileBrowserService.fileOps().listdir(\"/tmp\"); JSONArray statuses = (JSONArray)listdir.getEntity(); System.out.println(statuses.size()); Response response2 = fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, httpHeaders, uriInfo); Assert.assertEquals(200, response2.getStatus()); } ",
        "focal_src": "@PUT@Consumes(MediaType.MULTIPART_FORM_DATA)@Produces(MediaType.APPLICATION_JSON)public Response uploadFile(@FormDataParam(\"file\")InputStream uploadedInputStream, @FormDataParam(\"file\")FormDataContentDisposition contentDisposition, @FormDataParam(\"path\")String path)throws IOException, Exception { if( ! path.endsWith(\"/\"))path = path + \"/\"; String filePath = path + contentDisposition.getFileName(); uploadFile(filePath, uploadedInputStream); return Response.ok(HdfsApi.fileStatusToJSON(getApi(context).getFileStatus(filePath))).build(); } ",
        "focal_tgt": "@PUT@Consumes(MediaType.MULTIPART_FORM_DATA)@Produces(MediaType.APPLICATION_JSON)public Response uploadFile(@FormDataParam(\"file\")InputStream uploadedInputStream, @FormDataParam(\"file\")FormDataContentDisposition contentDisposition, @FormDataParam(\"path\")String path)throws Exception { if( ! path.endsWith(\"/\"))path = path + \"/\"; String filePath = path + contentDisposition.getFileName(); uploadFile(filePath, uploadedInputStream); return Response.ok(HdfsApi.fileStatusToJSON(getApi(context).getFileStatus(filePath))).build(); } "
    },
    {
        "test_src": "@Test public void getGroupFromGrpcClient()throws Exception { Configuration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.NOSASL.getAuthName()); Assert.assertEquals(\"\", SecurityUtils.getGroupFromGrpcClient()); Configuration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName()); Configuration.set(PropertyKey.SECURITY_GROUP_MAPPING_CLASS, IdentityUserGroupsMapping.class.getName()); AuthenticatedClientUser.set(\"test_client_user\"); Assert.assertEquals(\"test_client_user\", SecurityUtils.getGroupFromGrpcClient()); } ",
        "test_tgt": "@Test public void getGroupFromGrpcClient()throws Exception { mConfiguration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.NOSASL.getAuthName()); Assert.assertEquals(\"\", SecurityUtils.getGroupFromGrpcClient(mConfiguration)); mConfiguration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName()); mConfiguration.set(PropertyKey.SECURITY_GROUP_MAPPING_CLASS, IdentityUserGroupsMapping.class.getName()); AuthenticatedClientUser.set(\"test_client_user\"); Assert.assertEquals(\"test_client_user\", SecurityUtils.getGroupFromGrpcClient(mConfiguration)); } ",
        "focal_src": "public static String getGroupFromGrpcClient() { try { User user = AuthenticatedClientUser.get(); if(user == null) { return \"\"; } return CommonUtils.getPrimaryGroupName(user.getName()); } catch(IOException e) { return \"\"; } } ",
        "focal_tgt": "public static String getGroupFromGrpcClient(AlluxioConfiguration conf) { try { User user = AuthenticatedClientUser.get(conf); if(user == null) { return \"\"; } return CommonUtils.getPrimaryGroupName(user.getName(), conf); } catch(IOException e) { return \"\"; } } "
    },
    {
        "test_src": "@Test public void testPutBucketMaxAge() { Client client = new Client(); Response response; try { long maxAges[] = { Integer.MIN_VALUE, - 54321, - 1, 0, 1, 8, 1234567, Integer.MAX_VALUE }; for(int i = 0; i < maxAges.length; i ++ ) { long maxAge = maxAges[i]; System.out.println(\"maxAge=\" + maxAge); response = bucketManager.putBucketMaxAge(TestConfig.testBucket_z0, maxAge); Assert.assertEquals(200, response.statusCode); response = client.get(TestConfig.testUrl_z0); String value = respHeader(TestConfig.testUrl_z0, \"Cache-Control\"); System.out.println(value); } } catch(IOException e) { if(e instanceof QiniuException) { Assert.fail(((QiniuException)e).response.toString()); } } } ",
        "test_tgt": "@Test public void testPutBucketMaxAge() { String[]buckets = new String[] { TestConfig.testBucket_z0, TestConfig.testBucket_na0 }; for(String bucket : buckets) { final long maxAges[] = { Integer.MIN_VALUE, - 54321, - 1, 0, 1, 8, 1234567, 11111111, Integer.MAX_VALUE }; try { for(long maxAge : maxAges) { Response response = bucketManager.putBucketMaxAge(bucket, maxAge); Assert.assertEquals(200, response.statusCode); BucketInfo bucketInfo = bucketManager.getBucketInfo(bucket); long expect = maxAge; long actual = bucketInfo.getMaxAge(); System.out.println(\"expect=\" + expect); System.out.println(\"actual=\" + actual); Assert.assertEquals(expect, actual); } } catch(QiniuException e) { Assert.fail(e.response.toString()); } } } ",
        "focal_src": "public Response putBucketMaxAge(String bucket, long maxAge)throws QiniuException { String url = String.format(\"%s/maxAge?bucket=%s&maxAge=%d\", configuration.ucHost(), bucket, maxAge); Response res = post(url, null); if( ! res.isOK()) { throw new QiniuException(res); } res.close(); return res; } ",
        "focal_tgt": "public Response putBucketMaxAge(String bucket, long maxAge)throws QiniuException { String url = String.format(\"%s/maxAge?bucket=%s&maxAge=%d\", configuration.ucHost(), bucket, maxAge); Response res = post(url, null); if( ! res.isOK()) { throw new QiniuException(res); } return res; } "
    },
    {
        "test_src": "@Test public void testExecuteDMLUpdates()throws Exception { Method removeNagiosService = UpgradeCatalog200.class.getDeclaredMethod(\"removeNagiosService\"); Method updateHiveDatabaseType = UpgradeCatalog200.class.getDeclaredMethod(\"updateHiveDatabaseType\"); Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod(\"addNewConfigurationsFromXml\"); Method setSecurityType = UpgradeCatalog200.class.getDeclaredMethod(\"setSecurityType\"); UpgradeCatalog200 upgradeCatalog = createMockBuilder(UpgradeCatalog200.class).addMockedMethod(removeNagiosService).addMockedMethod(updateHiveDatabaseType).addMockedMethod(addNewConfigurationsFromXml).addMockedMethod(setSecurityType).createMock(); upgradeCatalog.removeNagiosService(); expectLastCall().once(); upgradeCatalog.addNewConfigurationsFromXml(); expectLastCall(); upgradeCatalog.updateHiveDatabaseType(); expectLastCall().once(); upgradeCatalog.setSecurityType(); expectLastCall().once(); replay(upgradeCatalog); upgradeCatalog.executeDMLUpdates(); verify(upgradeCatalog); } ",
        "test_tgt": "@Test public void testExecuteDMLUpdates()throws Exception { Method removeNagiosService = UpgradeCatalog200.class.getDeclaredMethod(\"removeNagiosService\"); Method updateHiveDatabaseType = UpgradeCatalog200.class.getDeclaredMethod(\"updateHiveDatabaseType\"); Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod(\"addNewConfigurationsFromXml\"); Method setSecurityType = UpgradeCatalog200.class.getDeclaredMethod(\"setSecurityType\"); Method updateDfsClusterAdmintistratorsProperty = UpgradeCatalog200.class.getDeclaredMethod(\"updateDfsClusterAdmintistratorsProperty\"); UpgradeCatalog200 upgradeCatalog = createMockBuilder(UpgradeCatalog200.class).addMockedMethod(removeNagiosService).addMockedMethod(updateHiveDatabaseType).addMockedMethod(addNewConfigurationsFromXml).addMockedMethod(setSecurityType).addMockedMethod(updateDfsClusterAdmintistratorsProperty).createMock(); upgradeCatalog.removeNagiosService(); expectLastCall().once(); upgradeCatalog.addNewConfigurationsFromXml(); expectLastCall(); upgradeCatalog.updateDfsClusterAdmintistratorsProperty(); expectLastCall(); upgradeCatalog.updateHiveDatabaseType(); expectLastCall().once(); upgradeCatalog.setSecurityType(); expectLastCall().once(); replay(upgradeCatalog); upgradeCatalog.executeDMLUpdates(); verify(upgradeCatalog); } ",
        "focal_src": "@Override protected void executeDMLUpdates()throws AmbariException, SQLException { removeNagiosService(); addNewConfigurationsFromXml(); updateHiveDatabaseType(); setSecurityType(); } ",
        "focal_tgt": "@Override protected void executeDMLUpdates()throws AmbariException, SQLException { removeNagiosService(); addNewConfigurationsFromXml(); updateDfsClusterAdmintistratorsProperty(); updateHiveDatabaseType(); setSecurityType(); } "
    },
    {
        "test_src": "@Test public void testNotifyCreditAvailable()throws Exception { final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32); final SingleInputGate inputGate = createSingleInputGate(); final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate); final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate); inputGate.setInputChannel(inputChannel1.getPartitionId().getPartitionId(), inputChannel1); inputGate.setInputChannel(inputChannel2.getPartitionId().getPartitionId(), inputChannel2); try { final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6); inputGate.setBufferPool(bufferPool); final int numExclusiveBuffers = 2; inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers); final CreditBasedClientHandler handler = new CreditBasedClientHandler(); final EmbeddedChannel channel = new EmbeddedChannel(handler); inputChannel1.requestSubpartition(0); inputChannel2.requestSubpartition(0); handler.addInputChannel(inputChannel1); handler.addInputChannel(inputChannel2); final BufferResponse bufferResponse1 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1); final BufferResponse bufferResponse2 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2); handler.notifyCreditAvailable(inputChannel1); handler.notifyCreditAvailable(inputChannel2); assertEquals(2, inputChannel1.getUnannouncedCredit()); assertEquals(2, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); assertTrue(channel.isWritable()); Object readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(2, ((AddCredit)readFromOutbound).credit); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(2, ((AddCredit)readFromOutbound).credit); assertNull(channel.readOutbound()); final int highWaterMark = channel.config().getWriteBufferHighWaterMark(); ByteBuf channelBlockingBuffer = Unpooled.buffer(highWaterMark).writerIndex(highWaterMark); channel.write(channelBlockingBuffer); final BufferResponse bufferResponse3 = createBufferResponse(TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3); handler.notifyCreditAvailable(inputChannel1); assertEquals(1, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); assertFalse(channel.isWritable()); assertNull(channel.readOutbound()); channel.flush(); assertSame(channelBlockingBuffer, channel.readOutbound()); assertTrue(channel.isWritable()); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(1, ((AddCredit)readFromOutbound).credit); assertEquals(0, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); assertNull(channel.readOutbound()); } finally { inputGate.releaseAllResources(); networkBufferPool.destroyAllBufferPools(); networkBufferPool.destroy(); } } ",
        "test_tgt": "@Test public void testNotifyCreditAvailable()throws Exception { final PartitionRequestClientHandler handler = new PartitionRequestClientHandler(); final EmbeddedChannel channel = new EmbeddedChannel(handler); final PartitionRequestClient client = new PartitionRequestClient(channel, handler, mock(ConnectionID.class), mock(PartitionRequestClientFactory.class)); final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32); final SingleInputGate inputGate = createSingleInputGate(); final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate, client); final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate, client); try { final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6); inputGate.setBufferPool(bufferPool); final int numExclusiveBuffers = 2; inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers); inputChannel1.requestSubpartition(0); inputChannel2.requestSubpartition(0); assertTrue(channel.isWritable()); Object readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(PartitionRequest.class)); assertEquals(inputChannel1.getInputChannelId(), ((PartitionRequest)readFromOutbound).receiverId); assertEquals(2, ((PartitionRequest)readFromOutbound).credit); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(PartitionRequest.class)); assertEquals(inputChannel2.getInputChannelId(), ((PartitionRequest)readFromOutbound).receiverId); assertEquals(2, ((PartitionRequest)readFromOutbound).credit); final BufferResponse bufferResponse1 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1); final BufferResponse bufferResponse2 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2); assertEquals(2, inputChannel1.getUnannouncedCredit()); assertEquals(2, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(inputChannel1.getInputChannelId(), ((AddCredit)readFromOutbound).receiverId); assertEquals(2, ((AddCredit)readFromOutbound).credit); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(inputChannel2.getInputChannelId(), ((AddCredit)readFromOutbound).receiverId); assertEquals(2, ((AddCredit)readFromOutbound).credit); assertNull(channel.readOutbound()); ByteBuf channelBlockingBuffer = blockChannel(channel); final BufferResponse bufferResponse3 = createBufferResponse(TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3); assertEquals(1, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); assertFalse(channel.isWritable()); assertNull(channel.readOutbound()); channel.flush(); assertSame(channelBlockingBuffer, channel.readOutbound()); assertTrue(channel.isWritable()); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(1, ((AddCredit)readFromOutbound).credit); assertEquals(0, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); assertNull(channel.readOutbound()); } finally { inputGate.releaseAllResources(); networkBufferPool.destroyAllBufferPools(); networkBufferPool.destroy(); } } ",
        "focal_src": "void notifyCreditAvailable(RemoteInputChannel inputChannel) { } ",
        "focal_tgt": "void notifyCreditAvailable(final RemoteInputChannel inputChannel) { ctx.executor().execute(new Runnable() { @Override public void run() { ctx.pipeline().fireUserEventTriggered(inputChannel); } }); } "
    },
    {
        "test_src": "@Test public void doDynamic()throws Exception { r.createWebClient().goTo(\"plugin/credentials/images/24x24/credentials.png\", \"image/png\"); r.createWebClient().assertFails(\"plugin/credentials/images/%2E%2E/images/24x24/credentials.png\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); r.createWebClient().assertFails(\"plugin/credentials/images/%252E%252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); } ",
        "test_tgt": "@Test public void doDynamic()throws Exception { r.createWebClient().goTo(\"plugin/credentials/images/24x24/credentials.png\", \"image/png\"); r.createWebClient().assertFails(\"plugin/credentials/images/%2E%2E/images/24x24/credentials.png\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); r.createWebClient().assertFails(\"plugin/credentials/images/%252E%252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/WEB-INF/licenses.xml\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/META-INF/MANIFEST.MF\", HttpServletResponse.SC_NOT_FOUND); } ",
        "focal_src": "public void doDynamic(StaplerRequest req, StaplerResponse rsp)throws IOException, ServletException { String path = req.getRestOfPath(); if(path.length() == 0)path = \"/\"; String requestPath = req.getRequestURI().substring(req.getContextPath().length()); boolean staticLink = requestPath.startsWith(\"/static/\"); long expires = staticLink ? TimeUnit2.DAYS.toMillis(365) : - 1; try { rsp.serveLocalizedFile(req, wrapper.baseResourceURL.toURI().resolve(new URI(null, '.' + path, null)).toURL(), expires); } catch(URISyntaxException x) { throw new IOException(x); } } ",
        "focal_tgt": "public void doDynamic(StaplerRequest req, StaplerResponse rsp)throws IOException, ServletException { String path = req.getRestOfPath(); if(path.startsWith(\"/META-INF/\") || path.startsWith(\"/WEB-INF/\")) { throw HttpResponses.notFound(); } if(path.length() == 0)path = \"/\"; String requestPath = req.getRequestURI().substring(req.getContextPath().length()); boolean staticLink = requestPath.startsWith(\"/static/\"); long expires = staticLink ? TimeUnit2.DAYS.toMillis(365) : - 1; try { rsp.serveLocalizedFile(req, wrapper.baseResourceURL.toURI().resolve(new URI(null, '.' + path, null)).toURL(), expires); } catch(URISyntaxException x) { throw new IOException(x); } } "
    }
]